[x] create a git repo
[x] create a functional test fsx script
[x] read a text file into memory
[x] read config file to set config variables
[] write a text file to disk
[] set permission on text file
[] populate list of files to process and/or run
[x] detect filesystem changes
[] update list of files as changes occur
[x] start fsi evaulation session
[x] run fsx file written to disk
[] run fsx file on polling cycle
[] remove fsx(text) file from disk
[x] point to specific chromedriver
[] point to specific browser
[] output results to stdout as json
[] write operations to log


main loop description:
    begin:
        load config file
            determine taraget dir containing .cwt and .fsx scripts to be run
            determine default polling cycle (in minutes)
            determine depth of directory structure to search (default 2)
            determine target browser
            determine default browser options
            determine additional packages and imports
            ...
        get list of .cwt and .fsx files to run
            git list of .cwt and .fsx files from target dir defined in config file
            create watcher for target dir
            if directories in target dir, check through each of them for .cwt and/or .fsx files until max depth
            create watcher for each dir found that contains .cwt and/or .fsx files
    loop:
        
Use Case: 

endpoint user would need to get data from 
transaction pass/failures as they occur and 
pass that data to an uspecified location 

currently each transaction sends its own event
this might change 

idea 1
output queue / transaction results queue
as a part of the loop after transactions are 
process, then process transaction results 

results queue 
- name: TransactionResultsPublisher
- setting: send as individual / send as bulk
- template together the user defined fn for their api or 
whatever with whatever we need to format the data to publish 
and then run it with the fsi to get the user the data on their 
service of choice. 

module TransactionResultsPublisher
(config) param PublishFileLocation (publish function file path)
(config) param individual/bulk
data PublishQueue
data PublishScript
fn composePublishScript
fn publishBulk
fn publishSingle
fn publish

